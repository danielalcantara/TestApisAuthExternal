package br.com.cea.bo.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import br.com.cea.bo.IPagamentoReportBO;
import br.com.cea.bo.IProcessarPagamentoReportBO;
import br.com.cea.dao.IPagamentoReportDAO;
import br.com.cea.factory.ProcessarPagamentoReportFactory;
import br.com.cea.model.ConsumoModel;
import br.com.cea.model.ContratoModel;
import br.com.cea.model.LancamentoPedidoModel;
import br.com.cea.model.LancamentoPeriodoModel;
import br.com.cea.model.PedidoSkuModel;
import br.com.cea.model.PeriodoModel;
import br.com.cea.util.DateUtil;

@Component
public class PagamentoReportBO implements IPagamentoReportBO {

	private static Logger logger = LogManager.getLogger();

	List<LancamentoPedidoModel> listLancamentoPedido = new ArrayList<>();

	@Autowired
	private IPagamentoReportDAO pagamentoReportDAO;

	@Override
	public void processPagamentoReport() {

		try {
			listLancamentoPedido = agruparLancamentosPorPedido(pagamentoReportDAO.fetchConsumos());

			if (!listLancamentoPedido.isEmpty()) {
				List<ContratoModel> listLancamentosPorContrato = agruparLancamentosPorContrato();

				for (ContratoModel contratoModel : listLancamentosPorContrato) {
					IProcessarPagamentoReportBO processor = ProcessarPagamentoReportFactory
							.getProcessarPagamentoReport(contratoModel.getTipoGarantia());
					processor.processarReport(contratoModel, pagamentoReportDAO);
					processor.processarPagamentoParcela(contratoModel, pagamentoReportDAO);
				}
			}

		} catch (Exception ex) {
			logger.error(ex);
			ex.printStackTrace();
		}

	}

	private List<LancamentoPedidoModel> agruparLancamentosPorPedido(List<ConsumoModel> listConsumos) {
		List<LancamentoPedidoModel> setLancamentoPedido = new ArrayList<>();
		LancamentoPedidoModel lancamentoPedidoModel = new LancamentoPedidoModel();
		Long cdFor = null;
		String nuNfItem = null;
		Date dataEmsNf = null;
		Long niLocEtg = null;

		for (ConsumoModel consumo : listConsumos) {
			if (!consumo.getIdFor().equals(cdFor) || !consumo.getNumNfItem().equals(nuNfItem) || dataEmsNf == null
					|| DateUtil.compareDateWithoutTime(consumo.getDataEmsNf(), dataEmsNf) != 0
					|| !consumo.getNiLocEtc().equals(niLocEtg)) {

				cdFor = consumo.getIdFor();
				nuNfItem = consumo.getNumNfItem();
				dataEmsNf = consumo.getDataEmsNf();
				niLocEtg = consumo.getNiLocEtc();
				lancamentoPedidoModel = new LancamentoPedidoModel();
				lancamentoPedidoModel.setValorBruto(0.0);
				lancamentoPedidoModel.setValorLiquido(0.0);
				lancamentoPedidoModel.setIdContrato(consumo.getIdContrato());
				lancamentoPedidoModel.setDataRecebementoDevolucaoItem(consumo.getDataFnzRecItem());
				setLancamentoPedido.add(lancamentoPedidoModel);
			}

			PedidoSkuModel pedidoSkuModel = new PedidoSkuModel();
			pedidoSkuModel.setCdItem(consumo.getCdItem());
			pedidoSkuModel.setCodigoFornecedor(consumo.getIdFor());
			pedidoSkuModel.setDataEmsNf(consumo.getDataEmsNf());
			pedidoSkuModel.setNiLocEtg(consumo.getNiLocEtc());
			pedidoSkuModel.setNuNfItem(consumo.getNumNfItem());
			lancamentoPedidoModel.addPedidoSku(pedidoSkuModel);

			lancamentoPedidoModel.setValorLiquido(lancamentoPedidoModel.getValorLiquido() + consumo.getValorLiquido());
			lancamentoPedidoModel.setValorBruto(lancamentoPedidoModel.getValorBruto() + consumo.getValorBruto());

		}

		return setLancamentoPedido;
	}

	private LancamentoPeriodoModel agruparLancamentoPedidoPorPeriodo(PeriodoModel periodo) {
		LancamentoPeriodoModel lancamentoPeriodo = new LancamentoPeriodoModel();
		List<LancamentoPedidoModel> listLancamentoPedidoTmp = new ArrayList<>();
		listLancamentoPedidoTmp.addAll(listLancamentoPedido);

		for (LancamentoPedidoModel lancamentoPedidoModel : listLancamentoPedido) {
			if (DateUtil.compareDateWithoutTime(periodo.getDataInicio(),
					lancamentoPedidoModel.getDataRecebementoDevolucaoItem()) <= 0
					|| DateUtil.compareDateWithoutTime(lancamentoPedidoModel.getDataRecebementoDevolucaoItem(),
							periodo.getDataFim()) <= 0) {
				lancamentoPeriodo.getLancamentosPedido().add(lancamentoPedidoModel);
				listLancamentoPedidoTmp.remove(lancamentoPedidoModel);
			}
		}
		
		listLancamentoPedido = listLancamentoPedidoTmp;

		return lancamentoPeriodo;
	}

	private List<ContratoModel> agruparLancamentosPorContrato() throws Exception {

		List<ContratoModel> listLancamentosPorContrato = new ArrayList<>();
		Long idContrato = null;

		for (LancamentoPedidoModel lancamentoPedidoModel : listLancamentoPedido) {

			if (!lancamentoPedidoModel.getIdContrato().equals(idContrato)) {
				ContratoModel contratoModel = pagamentoReportDAO.fetchContrato(lancamentoPedidoModel.getIdContrato());
				contratoModel.setGarantia(pagamentoReportDAO.fetchGarantia(contratoModel.getId()));
				contratoModel.getGarantia()
						.setListPeriodos(pagamentoReportDAO.fetchPeriodos(contratoModel.getGarantia().getId()));

				for (PeriodoModel periodo : contratoModel.getGarantia().getListPeriodos()) {
					periodo.setParcelas(pagamentoReportDAO.fetchParcelas(periodo.getId(), contratoModel.getId()));
					periodo.setLancamentoPeriodo(agruparLancamentoPedidoPorPeriodo(periodo));
				}

				listLancamentosPorContrato.add(contratoModel);
			}
		}

		return listLancamentosPorContrato;

	}

}
